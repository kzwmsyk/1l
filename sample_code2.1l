# いくつかの予約語に短いバージョンがある。
# var: v
# fun: fn
# true: t
# false: f
# class : cls
# method : mthd
# lambda : ^ λ

# ブロックの最後の式文、print文、return文はセミコロンを省略可能
v a = 1;
fn b(i) { p(a + i) }
b(15);

fn ternary(bool) {return bool ? "TRUE" : "FALSE"}
p(ternary(t));
p(ternary(f));

# do while実装済み

var a = 3;
do {
    p(a);
    a = a - 1;
} while (a < 0)

p(a);

# 無名関数はλ lambda ^で書ける。

var adder = λ(x){ return x + 1 };
p(adder(1));

cls Pair{mthd init(x,y){this.x = x; this.y = y}}
v divmod = λ(x, y){ return Pair(x//y, x%y) };
v pair = divmod(10, 3);
p(pair.x);
p(pair.y);

# bool int float string list map が基本データ型である。

var a = t;
var b = f;
var c = 1;
var d = 1.1;
var e = "abc";
var list = [1,2,3];
var map = %{"a":1, "b":2, "c":3};

# ドット記法に続く関数呼び出し `foo.bar(x,y,z)` は、
# fooがオブジェクトインスタンスの場合はメソッド呼び出しだが、
# それ以外のプリミティブの場合、 関数呼び出し `bar(foo, x, y, z)` の構文糖衣として扱われる。

p("abc");
"abc".p();

int("1");
"1".int();

size([1,2,3]).p();
[1,2,3].size().p();

# プログラムの最後の式文、return文もセミコロンを省略可能
p(1+1)