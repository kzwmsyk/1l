{{imports}}
from abc import ABC, abstractmethod


class {{base_name}}:
    def accept(self, visitor):
        pass


{{#types}}
class {{subclass_name}}{{base_name}}({{base_name}}):
    def __init__(self,{{#fields}}
                 {{name}}: {{type}}{{^is_last}},{{/is_last}}{{/fields}}):

    {{#fields}}
        self.{{name}} = {{name}}
    {{/fields}}

    def accept(self, visitor):
        return visitor.visit_{{subclass_name_lc}}_{{base_name_lc}}(self)


{{/types}}
class {{base_name}}Visitor(ABC):

    {{#types}}
    @abstractmethod
    def visit_{{subclass_name_lc}}_{{base_name_lc}}(self, {{base_name_lc}}: {{subclass_name}}{{base_name}}):
        pass

    {{/types}}

